/*
* generated by Xtext
*/
package com.rogueai.janki.card.lang.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CardTemplateGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class HtmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Html");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHtmlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentTagParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Keyword cHtmlKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Html:
		//	"<html>" content+=Tag* "</html>";
		public ParserRule getRule() { return rule; }

		//"<html>" content+=Tag* "</html>"
		public Group getGroup() { return cGroup; }

		//"<html>"
		public Keyword getHtmlKeyword_0() { return cHtmlKeyword_0; }

		//content+=Tag*
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//Tag
		public RuleCall getContentTagParserRuleCall_1_0() { return cContentTagParserRuleCall_1_0; }

		//"</html>"
		public Keyword getHtmlKeyword_2() { return cHtmlKeyword_2; }
	}

	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cStartTagNameAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cStartTagNameTypeParserRuleCall_0_1_0_0 = (RuleCall)cStartTagNameAssignment_0_1_0.eContents().get(0);
		private final Assignment cAttributesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_0_1_1_0 = (RuleCall)cAttributesAssignment_0_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cChildrenAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cChildrenTagParserRuleCall_0_1_3_0 = (RuleCall)cChildrenAssignment_0_1_3.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_0_1_4 = (Keyword)cGroup_0_1.eContents().get(4);
		private final Assignment cEndTagNameAssignment_0_1_5 = (Assignment)cGroup_0_1.eContents().get(5);
		private final RuleCall cEndTagNameTypeParserRuleCall_0_1_5_0 = (RuleCall)cEndTagNameAssignment_0_1_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1_6 = (Keyword)cGroup_0_1.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStartTagNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStartTagNameTypeParserRuleCall_1_0_0 = (RuleCall)cStartTagNameAssignment_1_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		private final Assignment cEndTagNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cEndTagNameKeyword_1_2_0 = (Keyword)cEndTagNameAssignment_1_2.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Tag:
		//	"<" (startTagName=Type attributes+=Attribute* ">" children+=Tag* "</" endTagName=Type ">") | startTagName=Type
		//	attributes+=Attribute* endTagName="" "/>";
		public ParserRule getRule() { return rule; }

		//"<" (startTagName=Type attributes+=Attribute* ">" children+=Tag* "</" endTagName=Type ">") | startTagName=Type
		//attributes+=Attribute* endTagName="" "/>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<" (startTagName=Type attributes+=Attribute* ">" children+=Tag* "</" endTagName=Type ">")
		public Group getGroup_0() { return cGroup_0; }

		//"<"
		public Keyword getLessThanSignKeyword_0_0() { return cLessThanSignKeyword_0_0; }

		//startTagName=Type attributes+=Attribute* ">" children+=Tag* "</" endTagName=Type ">"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//startTagName=Type
		public Assignment getStartTagNameAssignment_0_1_0() { return cStartTagNameAssignment_0_1_0; }

		//Type
		public RuleCall getStartTagNameTypeParserRuleCall_0_1_0_0() { return cStartTagNameTypeParserRuleCall_0_1_0_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_0_1_1() { return cAttributesAssignment_0_1_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_0_1_1_0() { return cAttributesAttributeParserRuleCall_0_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_1_2() { return cGreaterThanSignKeyword_0_1_2; }

		//children+=Tag*
		public Assignment getChildrenAssignment_0_1_3() { return cChildrenAssignment_0_1_3; }

		//Tag
		public RuleCall getChildrenTagParserRuleCall_0_1_3_0() { return cChildrenTagParserRuleCall_0_1_3_0; }

		//"</"
		public Keyword getLessThanSignSolidusKeyword_0_1_4() { return cLessThanSignSolidusKeyword_0_1_4; }

		//endTagName=Type
		public Assignment getEndTagNameAssignment_0_1_5() { return cEndTagNameAssignment_0_1_5; }

		//Type
		public RuleCall getEndTagNameTypeParserRuleCall_0_1_5_0() { return cEndTagNameTypeParserRuleCall_0_1_5_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_1_6() { return cGreaterThanSignKeyword_0_1_6; }

		//startTagName=Type attributes+=Attribute* endTagName="" "/>"
		public Group getGroup_1() { return cGroup_1; }

		//startTagName=Type
		public Assignment getStartTagNameAssignment_1_0() { return cStartTagNameAssignment_1_0; }

		//Type
		public RuleCall getStartTagNameTypeParserRuleCall_1_0_0() { return cStartTagNameTypeParserRuleCall_1_0_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_1_0() { return cAttributesAttributeParserRuleCall_1_1_0; }

		//endTagName=""
		public Assignment getEndTagNameAssignment_1_2() { return cEndTagNameAssignment_1_2; }

		//""
		public Keyword getEndTagNameKeyword_1_2_0() { return cEndTagNameKeyword_1_2_0; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_1_3() { return cSolidusGreaterThanSignKeyword_1_3; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeNameIDTerminalRuleCall_0_0 = (RuleCall)cAttributeNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cAttributeValueAssignment_2.eContents().get(0);
		
		//Attribute:
		//	attributeName=ID "=" attributeValue=STRING;
		public ParserRule getRule() { return rule; }

		//attributeName=ID "=" attributeValue=STRING
		public Group getGroup() { return cGroup; }

		//attributeName=ID
		public Assignment getAttributeNameAssignment_0() { return cAttributeNameAssignment_0; }

		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_0_0() { return cAttributeNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//attributeValue=STRING
		public Assignment getAttributeValueAssignment_2() { return cAttributeValueAssignment_2; }

		//STRING
		public RuleCall getAttributeValueSTRINGTerminalRuleCall_2_0() { return cAttributeValueSTRINGTerminalRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Type:
		//	ID (":" ID*)?;
		public ParserRule getRule() { return rule; }

		//ID (":" ID*)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(":" ID*)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private HtmlElements pHtml;
	private TagElements pTag;
	private AttributeElements pAttribute;
	private TypeElements pType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CardTemplateGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.rogueai.janki.card.lang.CardTemplate".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Html:
	//	"<html>" content+=Tag* "</html>";
	public HtmlElements getHtmlAccess() {
		return (pHtml != null) ? pHtml : (pHtml = new HtmlElements());
	}
	
	public ParserRule getHtmlRule() {
		return getHtmlAccess().getRule();
	}

	//Tag:
	//	"<" (startTagName=Type attributes+=Attribute* ">" children+=Tag* "</" endTagName=Type ">") | startTagName=Type
	//	attributes+=Attribute* endTagName="" "/>";
	public TagElements getTagAccess() {
		return (pTag != null) ? pTag : (pTag = new TagElements());
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}

	//Attribute:
	//	attributeName=ID "=" attributeValue=STRING;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Type:
	//	ID (":" ID*)?;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
