/*
* generated by Xtext
*/
parser grammar InternalCardTemplateParser;

options {
	tokenVocab=InternalCardTemplateLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package com.rogueai.janki.card.lang.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.rogueai.janki.card.lang.services.CardTemplateGrammarAccess;

}

@members {


	private CardTemplateGrammarAccess grammarAccess;
	 	
	public InternalCardTemplateParser(TokenStream input, CardTemplateGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Html";	
	} 
	   	   	
	@Override
	protected CardTemplateGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleHtml
entryRuleHtml returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getHtmlRule()); }
	 iv_ruleHtml=ruleHtml 
	 { $current=$iv_ruleHtml.current; } 
	 EOF 
;

// Rule Html
ruleHtml returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_8
    {
    	newLeafNode(otherlv_0, grammarAccess.getHtmlAccess().getHtmlKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHtmlAccess().getContentTagParserRuleCall_1_0()); 
	    }
		lv_content_1_0=ruleTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHtmlRule());
	        }
       		add(
       			$current, 
       			"content",
        		lv_content_1_0, 
        		"Tag");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_2=KEYWORD_9
    {
    	newLeafNode(otherlv_2, grammarAccess.getHtmlAccess().getHtmlKeyword_2());
    }
)
;





// Entry rule entryRuleTag
entryRuleTag returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTagRule()); }
	 iv_ruleTag=ruleTag 
	 { $current=$iv_ruleTag.current; } 
	 EOF 
;

// Rule Tag
ruleTag returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_3
    {
    	newLeafNode(otherlv_0, grammarAccess.getTagAccess().getLessThanSignKeyword_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTagAccess().getStartTagNameTypeParserRuleCall_0_1_0_0()); 
	    }
		lv_startTagName_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagRule());
	        }
       		set(
       			$current, 
       			"startTagName",
        		lv_startTagName_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAccess().getAttributesAttributeParserRuleCall_0_1_1_0()); 
	    }
		lv_attributes_2_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_3=KEYWORD_5
    {
    	newLeafNode(otherlv_3, grammarAccess.getTagAccess().getGreaterThanSignKeyword_0_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAccess().getChildrenTagParserRuleCall_0_1_3_0()); 
	    }
		lv_children_4_0=ruleTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_4_0, 
        		"Tag");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_5=KEYWORD_7
    {
    	newLeafNode(otherlv_5, grammarAccess.getTagAccess().getLessThanSignSolidusKeyword_0_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAccess().getEndTagNameTypeParserRuleCall_0_1_5_0()); 
	    }
		lv_endTagName_6_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagRule());
	        }
       		set(
       			$current, 
       			"endTagName",
        		lv_endTagName_6_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=KEYWORD_5
    {
    	newLeafNode(otherlv_7, grammarAccess.getTagAccess().getGreaterThanSignKeyword_0_1_6());
    }
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTagAccess().getStartTagNameTypeParserRuleCall_1_0_0()); 
	    }
		lv_startTagName_8_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagRule());
	        }
       		set(
       			$current, 
       			"startTagName",
        		lv_startTagName_8_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAccess().getAttributesAttributeParserRuleCall_1_1_0()); 
	    }
		lv_attributes_9_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_9_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_endTagName_10_0=
	KEYWORD_1
    {
        newLeafNode(lv_endTagName_10_0, grammarAccess.getTagAccess().getEndTagNameKeyword_1_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTagRule());
	        }
       		setWithLastConsumed($current, "endTagName", lv_endTagName_10_0, "");
	    }

)
)
	otherlv_11=KEYWORD_6
    {
    	newLeafNode(otherlv_11, grammarAccess.getTagAccess().getSolidusGreaterThanSignKeyword_1_3());
    }
))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_attributeName_0_0=RULE_ID
		{
			newLeafNode(lv_attributeName_0_0, grammarAccess.getAttributeAccess().getAttributeNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attributeName",
        		lv_attributeName_0_0, 
        		"ID");
	    }

)
)
	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_attributeValue_2_0=RULE_STRING
		{
			newLeafNode(lv_attributeValue_2_0, grammarAccess.getAttributeAccess().getAttributeValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attributeValue",
        		lv_attributeValue_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current.getText(); }  
	 EOF 
;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getTypeAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getColonKeyword_1_0()); 
    }
(    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getTypeAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)?)
    ;





