/*
* generated by Xtext
*/
package com.rogueai.janki.card.lang.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.rogueai.janki.card.lang.services.CardTemplateGrammarAccess;

public class CardTemplateParser extends AbstractContentAssistParser {
	
	@Inject
	private CardTemplateGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.rogueai.janki.card.lang.ui.contentassist.antlr.internal.InternalCardTemplateParser createParser() {
		com.rogueai.janki.card.lang.ui.contentassist.antlr.internal.InternalCardTemplateParser result = new com.rogueai.janki.card.lang.ui.contentassist.antlr.internal.InternalCardTemplateParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTagAccess().getAlternatives(), "rule__Tag__Alternatives");
					put(grammarAccess.getHtmlAccess().getGroup(), "rule__Html__Group__0");
					put(grammarAccess.getTagAccess().getGroup_0(), "rule__Tag__Group_0__0");
					put(grammarAccess.getTagAccess().getGroup_0_1(), "rule__Tag__Group_0_1__0");
					put(grammarAccess.getTagAccess().getGroup_1(), "rule__Tag__Group_1__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
					put(grammarAccess.getHtmlAccess().getContentAssignment_1(), "rule__Html__ContentAssignment_1");
					put(grammarAccess.getTagAccess().getStartTagNameAssignment_0_1_0(), "rule__Tag__StartTagNameAssignment_0_1_0");
					put(grammarAccess.getTagAccess().getAttributesAssignment_0_1_1(), "rule__Tag__AttributesAssignment_0_1_1");
					put(grammarAccess.getTagAccess().getChildrenAssignment_0_1_3(), "rule__Tag__ChildrenAssignment_0_1_3");
					put(grammarAccess.getTagAccess().getEndTagNameAssignment_0_1_5(), "rule__Tag__EndTagNameAssignment_0_1_5");
					put(grammarAccess.getTagAccess().getStartTagNameAssignment_1_0(), "rule__Tag__StartTagNameAssignment_1_0");
					put(grammarAccess.getTagAccess().getAttributesAssignment_1_1(), "rule__Tag__AttributesAssignment_1_1");
					put(grammarAccess.getTagAccess().getEndTagNameAssignment_1_2(), "rule__Tag__EndTagNameAssignment_1_2");
					put(grammarAccess.getAttributeAccess().getAttributeNameAssignment_0(), "rule__Attribute__AttributeNameAssignment_0");
					put(grammarAccess.getAttributeAccess().getAttributeValueAssignment_2(), "rule__Attribute__AttributeValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.rogueai.janki.card.lang.ui.contentassist.antlr.internal.InternalCardTemplateParser typedParser = (com.rogueai.janki.card.lang.ui.contentassist.antlr.internal.InternalCardTemplateParser) parser;
			typedParser.entryRuleHtml();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CardTemplateGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CardTemplateGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
